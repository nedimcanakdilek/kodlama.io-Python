from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.common.action_chains import ActionChains
import pytest
from pathlib import Path
from datetime import date


class Test_Sauce:
    
    def setup_method(self):
        self.driver = webdriver.Chrome(ChromeDriverManager().install())
        self.driver.maximize_window()
        self.driver.get("https://www.saucedemo.com/")
        self.folderPath = str(date.today())
        Path(self.folderPath).mkdir(exist_ok=True) 

    
    def teardown_method(self):
        self.driver.quit()




    def test_null_login(self):

        self.waitForElementVisible((By.ID, "login-button"))
        loginBtn = self.driver.find_element(By.ID, "login-button")
        loginBtn.click()
        
        self.waitForElementVisible((By.XPATH, '//*[@id="login_button_container"]/div/form/div[3]/h3'))
        errorMessage = self.driver.find_element(By.XPATH, "/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3")
        self.driver.save_screenshot(f"{self.folderPath}/test-null-login-png")
        assert errorMessage.text == "Epic sadface: Username is required"
        




    @pytest.mark.parametrize("username", ["standard_user", "problem_user", "performance_glitch_user"])
    def test_null_Pw(self, username):

        self.waitForElementVisible((By.ID, 'user-name'))
        usernameInput = self.driver.find_element(By.ID, 'user-name')
        usernameInput.send_keys(username)

        self.waitForElementVisible((By.ID, "login-button"))
        loginBtn = self.driver.find_element(By.ID, "login-button")
        loginBtn.click()

        errorMessage = self.driver.find_element(By.XPATH, '//*[@id="login_button_container"]/div/form/div[3]/h3')
        self.driver.save_screenshot(f"{self.folderPath}/test-null_Pw-{username}-.png")
        assert errorMessage.text == 'Epic sadface: Password is required'


    def test_lockedOut(self):
        self.waitForElementVisible((By.ID, 'user-name'))

        usernameInput = self.driver.find_element(By.ID, "user-name")
        passwordInput = self.driver.find_element(By.ID, 'password')
        loginBtn = self.driver.find_element(By.ID, 'login-button')

        action = ActionChains(self.driver)
        action.send_keys_to_element(usernameInput, "locked_out_user")
        action.send_keys_to_element(passwordInput, "secret_sauce")
        action.send_keys_to_element(loginBtn, Keys.ENTER)
        action.perform()

        errorMessage = self.driver.find_element(By.XPATH, '//*[@id="login_button_container"]/div/form/div[3]/h3')
        self.driver.save_screenshot(f"{self.folderPath}/test-lockedOut.png")
        assert errorMessage.text == 'Epic sadface: Sorry, this user has been locked out.'

    def test_errorIcon(self):
        self.waitForElementVisible((By.ID, 'login-button'))
        loginBtn = self.driver.find_element(By.ID, "login-button")
        loginBtn.click()

        xBtn = xBtn = self.driver.find_element(By.CLASS_NAME, "error-button")
        xBtn.click()
        errorIcon = len(self.driver.find_elements(By.CLASS_NAME, 'error_icon'))
        self.driver.save_screenshot(f"{self.folderPath}/test-errorIcon.png")

        assert errorIcon == 0


    def test_loginAndProduct(self):
        self.waitForElementVisible((By.ID, 'user-name'))

        usernameInput = self.driver.find_element(By.ID, "user-name")
        passwordInput = self.driver.find_element(By.ID, 'password')
        loginBtn = self.driver.find_element(By.ID, 'login-button')

        action = ActionChains(self.driver)
        action.send_keys_to_element(usernameInput, "standard_user")
        action.send_keys_to_element(passwordInput, "secret_sauce")
        action.send_keys_to_element(loginBtn, Keys.ENTER)
        action.perform()

        self.waitForElementVisible((By.CLASS_NAME, "inventory_list"))
        products = self.driver.find_elements(By.CLASS_NAME, "inventory_item")
        self.driver.save_screenshot(f"{self.folderPath}/test_loginAndProduct.png")

        assert len(products) == 6 


    @pytest.mark.parametrize("username, password", [("starndart_user", "test"), ("locked_out_user","Can"), ("problem_user","445566"),("standard_user","secret1_user")])
    def test_wrong_password(self, username, password):
        self.waitForElementVisible((By.ID, "user-name"))

        usernameInput = self.driver.find_element(By.ID, "user-name")
        passwordInput = self.driver.find_element(By.ID, "password")
        loginBtn = self.driver.find_element(By.ID, "login-button")

        actions = ActionChains(self.driver)
        actions.send_keys_to_element(usernameInput, username)
        actions.send_keys_to_element(passwordInput, password)
        actions.send_keys_to_element(loginBtn, Keys.ENTER)
        actions.perform()

        errorMessage = self.driver.find_element(By.XPATH, '//*[@id="login_button_container"]/div/form/div[3]/h3')

        self.driver.save_screenshot(f"{self.folderPath}/test-wrong-password-{username}-{password}-login.png")

        assert errorMessage.text == "Epic sadface: Username and password do not match any user in this service"



    @pytest.mark.parametrize("username,password",[("standard_user","secret_sauce")])
    def test_add_cart(self,username,password):
        self.waitForElementVisible((By.ID,"user-name"))
        userNameInput=self.driver.find_element(By.ID,"user-name")
        self.waitForElementVisible((By.ID,"password"))
        passwordInput=self.driver.find_element(By.ID,"password")
        userNameInput.send_keys(username)
        passwordInput.send_keys(password)
        loginBtn=self.driver.find_element(By.ID,"login-button")
        loginBtn.click()

        self.waitForElementVisible((By.ID,"add-to-cart-sauce-labs-bike-light"))
        addInput=self.driver.find_element(By.ID,"add-to-cart-sauce-labs-bike-light")
        addInput.click()
        self.driver.save_screenshot(f"{self.folderPath}/test-add-{username}-{password}.png")
        s_cart_badge=self.driver.find_element(By.CLASS_NAME,"shopping_cart_badge").text
        assert 1 == int(s_cart_badge)



    def test_logOut(self):

        self.waitForElementVisible((By.ID, 'user-name'))
        usernameInput = self.driver.find_element(By.ID, "user-name")
        passwordInput = self.driver.find_element(By.ID, 'password')
        loginBtn = self.driver.find_element(By.ID, 'login-button')

        action = ActionChains(self.driver)
        action.send_keys_to_element(usernameInput, "standard_user")
        action.send_keys_to_element(passwordInput, "secret_sauce")
        action.send_keys_to_element(loginBtn, Keys.ENTER)
        action.perform() 

        self.waitForElementVisible((By.CLASS_NAME, "inventory_item"))
        menuBtn = self.driver.find_element(By.ID, "react-burger-menu-btn")
        menuBtn.click()
        WebDriverWait(self.driver, 5).until(ec.visibility_of_element_located((By.ID, "logout_sidebar_link")))
        LogoutBtn = self.driver.find_element(By.ID, "logout_sidebar_link").click()
        # LogoutBtn.click()
        self.driver.save_screenshot(f"{self.folderPath}/test-LogOut.png")





    
           
    def waitForElementVisible(self, locator, timeout=5):
        WebDriverWait(self.driver, timeout).until(
            ec.visibility_of_element_located(locator))

